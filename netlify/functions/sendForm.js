// –§–∞–π–ª: netlify/functions/sendForm.js

const nodemailer = require('nodemailer');
// –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –î–ª—è —è—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π.
const busboy = require('busboy');

exports.handler = async function(event, context) {
  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  return new Promise((resolve, reject) => {
    // –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2 (–ì–õ–ê–í–ù–û–ï): –£–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ `new`.
    const bb = busboy({ headers: event.headers });
    const fields = {};
    const files = [];

    bb.on('field', (fieldname, value) => {
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ –ø–æ–ª—è –ø—Ä–∏—Ö–æ–¥—è—Ç
      // console.log(`–ü–æ–ª–µ [${fieldname}]: value: ${value}`);
      fields[fieldname] = value;
    });

    bb.on('file', (fieldname, file, info) => {
      const { filename, encoding, mimeType } = info;
      let fileBuffer = Buffer.alloc(0);
      file.on('data', (data) => {
        fileBuffer = Buffer.concat([fileBuffer, data])
      });
      file.on('end', () => {
        files.push({ filename, content: fileBuffer, contentType: mimeType });
      });
    });

    bb.on('finish', async () => {
      try {
        const transporter = nodemailer.createTransport({
          // –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Gmail
          service: 'gmail',
          auth: {
            user: process.env.GMAIL_USER,
            pass: process.env.GMAIL_PASS
          }
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        const emailBody = `
          <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É!</h2>
          <p><strong>–ò–º—è:</strong> ${fields.fullname || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
          <p><strong>Email:</strong> ${fields.email || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${fields.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
          <hr>
          <h3>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:</h3>
          <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏:</strong></p>
          <p>${fields['tattoo-description'] || '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
          <p><strong>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞:</strong> ${fields.appointmentDate || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}</p>
          <p><strong>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã:</strong></p>
          <p>${fields.bodySpaces || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}</p>
          <hr>
          <p><i>–§–∞–π–ª—ã-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —ç—Ç–æ–º—É –ø–∏—Å—å–º—É.</i></p>
        `;

        // === –ü–∏—Å—å–º–æ –¥–ª—è —Å—Ç—É–¥–∏–∏ ===
        await transporter.sendMail({
          from: `"–§–æ—Ä–º–∞ —Å —Å–∞–π—Ç–∞" <${process.env.GMAIL_USER}>`,
          to: 'antonfilonenko95@gmail.com', // ‚Üê –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É
          subject: `üñã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∞—Ç—É –æ—Ç ${fields.fullname}`,
          html: emailBody,
          attachments: files
        });

        // === –ü–∏—Å—å–º–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞) ===
        if (fields.email) {
            await transporter.sendMail({
              from: `"–í–∞—à–∞ –¢–∞—Ç—É-–°—Ç—É–¥–∏—è" <${process.env.GMAIL_USER}>`,
              to: fields.email,
              subject: 'üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∞!',
              html: `
                <p>–ü—Ä–∏–≤–µ—Ç, ${fields.fullname}!</p>
                <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞.</p>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–í–∞—à–∞ –¢–∞—Ç—É-–°—Ç—É–¥–∏—è</p>
              `
            });
        }

        resolve({ statusCode: 200, body: JSON.stringify({ message: "–ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" }) });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        resolve({ statusCode: 500, body: JSON.stringify({ error: error.message }) });
      }
    });

    bb.on('error', err => {
        console.error('–û—à–∏–±–∫–∞ Busboy:', err);
        resolve({ statusCode: 500, body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã.' }) });
    });

    // –í–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ busboy
    bb.end(Buffer.from(event.body, event.isBase64Encoded ? 'base64' : 'utf-8'));
  });
};